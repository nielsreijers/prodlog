#!/bin/bash

PRODLOG_VERSION="2.6.0"

# Exit immediately if a command exits with a non-zero status.
set -e

PRODLOG_CMD_PREFIX=$'\x1A(dd0d3038-1d43-11f0-9761-022486cd4c38) PRODLOG:'
CMD_CHECK_IS_ACTIVE="IS CURRENTLY INACTIVE"
CMD_ARE_YOU_RUNNING="PRODLOG, ARE YOU RUNNING?"
CMD_START_CAPTURE_RUN="START CAPTURE RUN"
CMD_START_CAPTURE_EDIT="START CAPTURE EDIT"
CMD_STOP_CAPTURE_RUN="STOP CAPTURE RUN"
CMD_STOP_CAPTURE_EDIT="STOP CAPTURE EDIT"
CMD_TASK_LIST="TASK LIST"
CMD_TASK_START_NEW="TASK START NEW"
CMD_TASK_SET_ACTIVE="TASK SET ACTIVE"
CMD_TASK_UNSET_ACTIVE="TASK UNSET ACTIVE"
REPLY_YES_PRODLOG_IS_RUNNING="PRODLOG IS RUNNING"

# Function to send commands to prodlog via stdout
# Usage: send_command "COMMAND_NAME" "arg1" "arg2" ...
send_command() {
    local cmd="$1"
    shift
    local encoded_args=""
    local arg
    for arg in "$@"; do
        # Use base64 -w0 to prevent line wrapping
        encoded_args+=':'
        encoded_args+=$(echo -n "$arg" | base64 -w0)
    done
    printf "\n%s%s%s;\n" "$PRODLOG_CMD_PREFIX" "$cmd" "$encoded_args"
}

# Function to print help message
print_help() {
    echo "Record a command or an edit session and its output in prodlog. An instance of prodlog_server must be running."
    echo ""
    echo "Usage: $0 run [-m <message>] <command> [args...]"
    echo "       $0 edit [-m <message>] [-s] <filename>"
    echo "       $0 task list"
    echo "       $0 task start <description>"
    echo "       $0 task set <id>"
    echo "       $0 task unset"
    echo "  -m <message>   Optional message to log with the command or edit."
    echo "  -s             Use sudo to edit or run the command."
    echo ""
    echo "Task management:"
    echo "  task list                 Show recent tasks"
    echo "  task start <description>  Create and activate a new task"
    echo "  task set <id>             Activate an existing task"
    echo "  task unset                Unset the active task, no task will be active"
    echo ""
    echo "Testing if prodlog_server is running:"
    send_command "$CMD_CHECK_IS_ACTIVE"
}

# Function to get base64-encoded file contents, or empty string if file doesn't exist
get_file_contents() {
    local file="$1"
    if [[ $use_sudo -eq 1 ]]; then
        if ! sudo test -f "$file"; then
            echo ""
        else
            sudo base64 -w0 "$file"
        fi        
    else
        if [[ ! -f "$file" ]]; then
            echo ""
        else
            base64 -w0 "$file"
        fi        
    fi
}

# Function to handle task commands
handle_task_command() {
    local task_cmd="$1"
    shift
    
    case "$task_cmd" in
        "list")
            send_command "$CMD_TASK_LIST"
            ;;
        "start")
            if [[ $# -eq 0 ]]; then
                echo "Error: Task name required for 'task start'"
                exit 1
            fi
            local task_name="$*"
            send_command "$CMD_TASK_START_NEW" "$task_name"
            ;;
        "set")
            if [[ $# -eq 0 ]]; then
                echo "Error: Task name required for 'task start'"
                exit 1
            fi
            local task_id="$1"
            send_command "$CMD_TASK_SET_ACTIVE" "$task_id"
            ;;
        "unset")
            send_command "$CMD_TASK_UNSET_ACTIVE"
            ;;
        *)
            echo "Error: Unknown task command '$task_cmd'"
            print_help
            exit 1
            ;;
    esac
}

# --- Main Script Logic ---

# Check if the first argument is 'run', 'edit', or 'task'
if [[ "$1" == "task" ]]; then
    if [[ $# -lt 2 ]]; then
        echo "Error: Task command required"
        print_help
        exit 1
    fi
    handle_task_command "$2" "${@:3}"
    exit 0
elif [[ "$1" != "run" && "$1" != "edit" ]]; then
    print_help
    exit 1
fi

mode="$1"
shift

# Parse options before the command
message=""
use_sudo=0
while [[ "$1" == -* ]]; do
    case "$1" in
        -m)
            shift
            if [[ -z "$1" ]]; then
                echo "Error: -m requires a message argument."
                exit 1
            fi
            message="$1"
            shift
            ;;
        -s)
            use_sudo=1
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Check if a command or filename was provided
if [[ "$mode" == "run" ]]; then
    if [[ $# -eq 0 ]]; then
        echo "Error: No command provided to run."
        print_help
        exit 1
    fi
elif [[ "$mode" == "edit" ]]; then
    if [[ $# -ne 1 ]]; then
        echo "Error: In edit mode, you must provide exactly one filename to edit."
        print_help
        exit 1
    fi
    filename="$1"
fi

# Check if prodlog is running
send_command "$CMD_ARE_YOU_RUNNING" "$PRODLOG_VERSION"

# Read response from stdin with a 1-second timeout
if ! read -t 1 response; then
    echo "Error: Timeout waiting for prodlog response. Is it running?" >&2
    exit 1
fi

response=$(echo "$response" | xargs) 

if [[ "$response" != "$REPLY_YES_PRODLOG_IS_RUNNING" ]]; then
    echo "Error: Unexpected response from prodlog: '$response'" >&2
    exit 1
fi

# Get metadata
hostname=$(hostname)
cwd=$(pwd)
username=$(whoami)

# Send start marker depending on mode
if [[ "$mode" == "run" ]]; then
    if [[ $use_sudo -eq 1 ]]; then
        cmd="sudo $*"
    else
        cmd="$*"
    fi
    send_command "$CMD_START_CAPTURE_RUN" "$hostname" "$cwd" "$cmd" "$message" "$username"
    on_exit() {
        exit_status=$?
        send_command "$CMD_STOP_CAPTURE_RUN" "$exit_status"
        exit $exit_status
    }
    trap on_exit EXIT
    if [[ $use_sudo -eq 1 ]]; then
        sudo "$@"
    else
        "$@"
    fi
elif [[ "$mode" == "edit" ]]; then
    filename_fullpath="$(realpath -m "$filename")"
    original_file_b64=$(get_file_contents "$filename_fullpath")
    if [[ $use_sudo -eq 1 ]]; then
        cmd="sudo ${EDITOR:-vi} $filename_fullpath"
    else
        cmd="${EDITOR:-vi} $filename_fullpath"
    fi
    send_command "$CMD_START_CAPTURE_EDIT" "$hostname" "$cwd" "$cmd" "$message" "$username" "$filename_fullpath" "$original_file_b64"

    on_exit() {
        exit_status=$?
        edited_file_b64=$(get_file_contents "$filename_fullpath")
        send_command "$CMD_STOP_CAPTURE_EDIT" "$exit_status" "$edited_file_b64"
        exit $exit_status
    }
    trap on_exit EXIT
    if [[ $use_sudo -eq 1 ]]; then
        sudo "${EDITOR:-vi}" "$filename_fullpath"
    else
        "${EDITOR:-vi}" "$filename_fullpath"
    fi
fi

