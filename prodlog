#!/usr/bin/env python3
import sys
import os
import pty
import tty
import termios
import datetime
import socket
from pathlib import Path
import select
import subprocess
import argparse

def main():
    parser = argparse.ArgumentParser(description='Record shell output')
    parser.add_argument('command', nargs='?', choices=['run', 'record'], help='Command to execute')
    parser.add_argument('--dir', '-d', default=str(Path.home() / '.prodlog'),
                       help='Base directory for logs (default: ~/.prodlog)',
                       type=lambda p: str(Path(p).expanduser().resolve()))
    parser.add_argument('args', nargs=argparse.REMAINDER, help='Command line arguments')
    
    args = parser.parse_args()
    
    if args.command is None:
        parser.print_help()
        print("\n##### PRODLOG IS CURRENTLY INACTIVE #####")
        sys.exit(1)
    elif args.command == 'run':
        run_command(args.args)
    elif args.command == 'record':
        print(f"Prodlog will write to: {args.dir}")
        record_shell(base_dir=Path(args.dir))

def run_command(command):
    try:
        hostname = socket.gethostname()
        cmd_str = ' '.join(command)

        # Print warning that will be hidden when running under record
        print("##### WARNING PRODLOG RECORD IS NOT RUNNING SO THIS IS NOT BEING RECORDED #####")

        # Print start marker with metadata
        print("\n##### PRODLOG START CAPTURE #####")
        print(hostname)
        print(cmd_str)

        # Execute command in a PTY
        master_fd, slave_fd = pty.openpty()
        process = subprocess.Popen(command,
                                 stdin=slave_fd,
                                 stdout=slave_fd,
                                 stderr=slave_fd,
                                 preexec_fn=os.setsid)
        os.close(slave_fd)

        # Save terminal settings
        old_settings = termios.tcgetattr(sys.stdin)
        try:
            # Set raw mode
            tty.setraw(sys.stdin)
            
            while process.poll() is None:  # Only run while process is alive
                rfds = [sys.stdin, master_fd]
                reads, _, _ = select.select(rfds, [], [], 0.1)  # Add timeout

                for fd in reads:
                    if fd == sys.stdin:
                        # Forward input to process
                        data = os.read(sys.stdin.fileno(), 1024)
                        try:
                            os.write(master_fd, data)
                        except OSError:
                            break  # Process probably died
                    else:
                        # Forward output to terminal
                        try:
                            data = os.read(master_fd, 1024)
                            if data:
                                sys.stdout.buffer.write(data)
                                sys.stdout.buffer.flush()
                        except OSError:
                            break  # Process probably died

        finally:
            # Restore terminal settings
            termios.tcsetattr(sys.stdin, termios.TCSAFLUSH, old_settings)
            try:
                os.close(master_fd)
            except OSError:
                pass

        # Print stop marker
        print("##### PRODLOG STOP CAPTURE #####")

        # Print warning that will be hidden when running under record
        print("##### WARNING PRODLOG RECORD IS NOT RUNNING SO THIS IS NOT BEING RECORDED #####")
    
    except Exception as e:
        print(f"Error in run_command: {str(e)}", file=sys.stderr)
        import traceback
        traceback.print_exc(file=sys.stderr)
        sys.exit(1)

def record_shell(base_dir=Path.home() / '.prodlog'):
    # Create log directory if it doesn't exist
    base_dir = Path(base_dir)
    base_dir.mkdir(parents=True, exist_ok=True)
    log_file = base_dir / 'prodlog.md'

    # Add this function to handle window size changes
    def set_window_size(fd):
        # Get the window size of our terminal
        import struct, fcntl, termios
        size = struct.pack('HHHH', 0, 0, 0, 0)
        size = fcntl.ioctl(sys.stdin.fileno(), termios.TIOCGWINSZ, size)
        rows, cols, _, _ = struct.unpack('HHHH', size)
        # Set the child terminal to the same size
        fcntl.ioctl(fd, termios.TIOCSWINSZ, struct.pack('HHHH', rows, cols, 0, 0))

    def read(fd):
        # Add buffer as instance variable if not present
        if not hasattr(read, 'buffer'):
            read.buffer = ''
        if not hasattr(read, 'capturing'):
            read.capturing = False
        if not hasattr(read, 'capture_metadata'):
            read.capture_metadata = 0  # Counter for metadata lines after START
        if not hasattr(read, 'hostname'):
            read.hostname = None
        if not hasattr(read, 'start_time'):
            read.start_time = None
        if not hasattr(read, 'command'):
            read.command = None
        if not hasattr(read, 'alternate_screen'):
            read.alternate_screen = False
        if not hasattr(read, 'current_logfile'):
            read.current_logfile = None
        if not hasattr(read, 'all_hosts_logfile'):
            read.all_hosts_logfile = None
        
        # Read raw data
        data = os.read(fd, 1024)
        decoded = data.decode(errors='replace')
        
        # Check for alternate screen mode sequences
        if '\x1b[?1049h' in decoded:  # Enter alternate screen
            read.alternate_screen = True
            return data  # Pass through raw data
        elif '\x1b[?1049l' in decoded:  # Exit alternate screen
            read.alternate_screen = False
            return data  # Pass through raw data
        elif read.alternate_screen:
            return data  # Pass through raw data while in alternate screen
        
        # Add to buffer
        read.buffer += decoded
        
        # Process complete lines
        lines = read.buffer.split('\n')
        # Keep the last potentially partial line in the buffer
        read.buffer = lines[-1] if not decoded.endswith('\n') else ''
        
        # Prepare modified data for terminal display
        modified_data = ''
        
        # Process all complete lines
        for line in lines[:-1]:
            # Replace warning with "being recorded" message
            if "##### WARNING PRODLOG RECORD IS NOT RUNNING SO THIS IS NOT BEING RECORDED #####" in line:
                modified_data += "##### OUTPUT RECORDED BY PRODLOG #####\n"
                continue
            
            # Replace inactive message with active message
            if "##### PRODLOG IS CURRENTLY INACTIVE" in line:
                modified_data += "Prodlog is currently ACTIVE\n"
                continue
            
            if read.capture_metadata > 0:
                read.capture_metadata -= 1
                if read.capture_metadata == 1:
                    read.hostname = line.strip()  # Clean up the hostname
                elif read.capture_metadata == 0:
                    read.command = line
                    # Get start time in UTC
                    read.start_time = datetime.datetime.now(datetime.timezone.utc)
                    
                    # Create hostname directory and get log filename
                    output_dir = base_dir / "output" / read.hostname
                    output_dir.mkdir(parents=True, exist_ok=True)
                    
                    # Create all-hosts directory
                    all_hosts_dir = base_dir / "output" / "all-hosts"
                    all_hosts_dir.mkdir(parents=True, exist_ok=True)
                    
                    # Get first word of command for filename
                    first_word = read.command.split()[0]
                    timestamp = read.start_time.strftime('%Y%m%d_%H%M%S')
                    read.current_logfile = output_dir / f"{timestamp}-{first_word}.log"
                    read.all_hosts_logfile = all_hosts_dir / f"{timestamp}-{read.hostname}-{first_word}.log"
                    
                    # Format timestamp nicely
                    formatted_time = read.start_time.strftime('%Y-%m-%d %H:%M:%S.%f')[:-3] + " UTC"
                    
                    # Write header to main log
                    header = f"""╔══════════════════════════════════════════════════════════════════════════════
║ Host:     {read.hostname}
║ Start:    {formatted_time}
║ Command:  {read.command}
║ Output:   {read.current_logfile}"""
                    with open(log_file, 'a') as f:
                        f.write(header + '\n')
                        f.flush()
                    
                    # Write header to both log files
                    for logfile in [read.current_logfile, read.all_hosts_logfile]:
                        with open(logfile, 'w') as f:
                            f.write(f"Host:     {read.hostname}\n")
                            f.write(f"Start:    {formatted_time}\n")
                            f.write(f"Command:  {read.command}\n")
                            f.write("="*80 + "\n\n")
                            f.flush()
                continue
            
            if "##### PRODLOG START CAPTURE #####" in line:
                read.capturing = True
                read.capture_metadata = 2  # Expect 2 lines: hostname, command
                continue
            
            if "##### PRODLOG STOP CAPTURE #####" in line:
                read.capturing = False
                # Calculate duration and write footer
                end_time = datetime.datetime.now(datetime.timezone.utc)
                duration_ms = (end_time - read.start_time).total_seconds() * 1000
                
                # Format end timestamp nicely
                formatted_end = end_time.strftime('%Y-%m-%d %H:%M:%S.%f')[:-3] + " UTC"
                
                # Write footer to main log
                footer = f"""║ End:      {formatted_end}
║ Duration: {duration_ms:.2f}ms
╚══════════════════════════════════════════════════════════════════════════════

"""
                with open(log_file, 'a') as f:
                    f.write(footer)
                    f.flush()
                
                # Write footer to both log files
                for logfile in [read.current_logfile, read.all_hosts_logfile]:
                    with open(logfile, 'a') as f:
                        f.write("\n" + "="*80 + "\n")
                        f.write(f"End:      {formatted_end}\n")
                        f.write(f"Duration: {duration_ms:.2f}ms\n")
                        f.flush()
                continue
            
            # Output regular lines to terminal and both log files
            modified_data += line + '\n'
            
            # Only write to log files if we're capturing
            if read.capturing:
                for logfile in [read.current_logfile, read.all_hosts_logfile]:
                    with open(logfile, 'a') as f:
                        f.write(line + '\n')
                        f.flush()
        
        # Handle any remaining partial line (likely a prompt)
        if read.buffer:
            if decoded.endswith('\n'):
                # Complete line - clear any existing content first
                modified_data += '\033[2K\r' + read.buffer + '\n'
            else:
                # Partial line/prompt - clear and rewrite
                modified_data += '\033[2K\r' + read.buffer
        
        return modified_data.encode()
    
    # Initialize capturing state
    read.capturing = False

    # Save original terminal settings
    old_settings = termios.tcgetattr(sys.stdin)
    
    try:
        # Create pseudo-terminal
        pid, fd = pty.fork()
        
        if pid == 0:  # Child process
            # Execute user's shell
            shell = os.environ.get('SHELL', '/bin/bash')
            os.execv(shell, [shell])
        else:  # Parent process
            # Set initial window size
            set_window_size(fd)
            
            # Set raw mode
            tty.setraw(sys.stdin.fileno())
            
            while True:
                try:
                    # Watch both original input and child's output
                    rfds = [sys.stdin, fd]
                    reads, _, _ = select.select(rfds, [], [])

                    for read_fd in reads:
                        if read_fd == sys.stdin:
                            # Forward input to child
                            data = os.read(sys.stdin.fileno(), 1024)
                            if data == b'\x1c':  # SIGWINCH - window size changed
                                set_window_size(fd)
                            os.write(fd, data)
                        else:
                            # Forward child's output to stdout
                            try:
                                data = read(fd)
                                if not data:
                                    raise EOFError
                                os.write(sys.stdout.fileno(), data)
                            except EOFError:
                                # Child process ended
                                raise

                except (EOFError, OSError):
                    break

    except Exception as e:
        if read.capturing:
            with open(log_file, 'a') as f:
                f.write(f"\nError: {str(e)}\n")
    finally:
        # Restore original terminal settings
        termios.tcsetattr(sys.stdin, termios.TCSAFLUSH, old_settings)

if __name__ == "__main__":
    main()